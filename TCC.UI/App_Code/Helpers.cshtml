@using TCC.UI.Helpers.Toastrs

@helper ShowToastMessages(Toastr toastr)
{
    if (toastr != null)
    {
        <script type="text/javascript">
            $(() => {
            toastr.options.closeButton = '@toastr.ShowCloseButton';
            toastr.options.newestOnTop = '@toastr.ShowNewestOnTop';
            toastr.options.positionClass = '@toastr.PositionClass';

            @foreach (var message in toastr.ToastMessages)
            {
                var toastTypeValue = message.ToastType.ToString("F").ToLower();
                @: var optionsOverride = { /* Add message specific options here */ };
                if (message.IsSticky)
                {
                  @: optionsOverride.timeOut = 0;
                  @: optionsOverride.extendedTimeout = 0;
                }
                @: toastr['@toastTypeValue']('@message.Message', '@message.Title', optionsOverride);
            }
            });
        </script>
    }
}

@helper ColumnEdit(string campo, string url)
{
    @:  {
    @:      data: '@campo',
    @:      render: function(data, type, row) {
    @:          return '<a href="@url?id=' + row.Id + '">' + data + '</a>';
    @:      }
    @:  }
}

@helper ColumnIcon(string icon, string ajax)
{
    @:  {
    @:      render: function(data, type, row) {
    @:          return '<a onclick="@ajax\(' + row.Id + '\)"><span class="@icon"></span></a>';
    @:      }
    @:  }
}

@helper LanguageTable()
{
    @:  language: {
    @:      decimal: "",
    @:      emptyTable: "Sem dados disponíveis na tabela",
    @:      info: "Página _PAGE_ de _PAGES_",
    @:      infoEmpty: "Sem registros disponíveis",
    @:      infoFiltered: "(filtrados do total de _MAX_ registros)",
    @:      infoPostFix: "",
    @:      thousands: ",",
    @:      lengthMenu: "_MENU_",
    @:      loadingRecords: "Carregando...",
    @:      processing: "Processando...",
    @:      search: "",
    @:      zeroRecords: "Não encontrado",
    @:      paginate: {
    @:          first: "Primeiro",
    @:          last: "Último",
    @:          next: "Avançar",
    @:          previous: "Voltar"
    @:      },
    @:      aria: {
    @:          sortAscending: ":ativado para ordenação ascendente",
    @:          sortDescending: ":ativado para ordenação descendente"
    @:      }
    @:  }
}


@helper  AddPageAjax(string function, string url, string idReload)
{
    @:  function @function (id) {
    @:      $.ajax({
    @:          type: 'POST',
    @:          url: '@url',
    @:          data: { 'id': id },
    @:          dataType: 'json',
    @:          success: function(data) {
    @:              $('#@idReload').empty().html(data)
    @:          }
    @:      });
    @:  }
}