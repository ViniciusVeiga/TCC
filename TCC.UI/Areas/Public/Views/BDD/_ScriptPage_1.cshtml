@model ETHistoric

@using TCC.Domain.Entities

@{
    var urlSave = "Learnboard/BDD/SaveHistoric";
    var page = "Page_1";
}

@Scripts.Render("~/Scripts/Postit")

<script type="text/javascript">
    var userStorySelected;
    var historicChoice = [];
    var eChoice = $('#ChooseChoice').html();
    var finalLine = $('#FinalLine').html();
    var none = 'none';

    var additionalE =
    {
        'Id': none,
        'Text': '<span>E: </span>',
        'Html': $('#AdditionalE').html(),
    }

    var sequence =
    [
        {
            'Id': 0,
            'Text': 'Cenário: ',
            'Flag': true
        },
        {
            'Id': 1,
            'Text': 'Dado: ',
            'Html': $('#GivenLine').html(),
            'Flag': false
        },
        {
            'Id': 2,
            'Text': 'Quando: ',
            'Html': $('#WhenLine').html(),
            'Flag': false
        },
        {
            'Id': 3,
            'Text': 'Então: ',
            'Html': $('#ThenLine').html(),
            'Flag': false
        },
        {
            'Id': 4,
            'Text': 'Mas: ',
            'Html': $('#AdditionalBut').html(),
            'Flag': false
        },
        additionalE
    ]

    function start() {
        $('#Append').append(ePlusPostit);
    }

    function writeLine() {
        var input = $('#Text');
        var text = input.val();
        input.val('');

        if (text != '') {
            addLine(text)
        }
    }

    function addLine(text) {
        $('.remove-line').remove();
        $('.lines:last p:last').append(text).append(eRemoveLinePostit);

        count();
        choices();
    }

    function addTitle(text) {
        var p = $('<p></p>').append(text);

        $('.lines:last').append(p);
    }

    function addChoice(html) {
        $('.lines:last').append(eChoice).append(html);;
    }

    function sendToSave(event) {
        var result = validationsByJs();

        if (result == true) {

            var data = {
                'model': {
                    'Id': '@Model.Id',
                    'IdProject': '@Model.IdProject',
                    'CardBDDs': []
                },
                'page': '@page'
            };

            $('.postit', '#Append').each(function () {
                var thisPostit = $(this);
                var cardLine = [];

                thisPostit.find('p').each(function () {
                    cardLine.push({ 'Line': $(this).text() });
                });

                data.model.CardBDDs.push({
                    'Id': thisPostit.children('#Id').val(),
                    'IdHistoric': '@Model.Id',
                    'CardLines': cardLine
                });
            });

            $.ajax({
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                url: '@urlSave',
                data: JSON.stringify(data),
                success: function (data) {
                    changeContent(data);
                }
            });
        }
        else
            $('.board-message')
                .text(result)
                .fadeIn();
    }

    function validationsByJs() {
        if ($('.postit', '#Append').length == 0)
            return 'Escreva pelo menos um card';

        return true;
    }

    function count() {
        countLines = $('.postit:last p').length;
    }

    function finishCard() {
        var lastPostit = $('.postit:last');
        lastPostit.addClass('alert-dismissible').prepend(eRemovePostit);
        lastPostit.removeClass('postit-send');

        appendDateOfUserStory(lastPostit);
        resetHistoricBDD();

        $('#Append').append(ePlusPostit);
        $('.postit:last .input-group').remove();
        $('.remove-line').remove();
    }

    function appendPostit(element) {
        var result = validationsToAppendPostit();

        if (result == true) {
            element.parent().remove();
            $('#Append').append(ePostit);

            count();
            choices();

            $('#Text').focus();
        }
        else
            writeMessage(result);
    }

    function validationsToAppendPostit() {
        var countActive = $('.postit.active').length;

        if (countActive == 0)
            return 'Selecione um User Story para adicionar um cartão!';

        return true;
    }

    function removePostit(element) {
        element.closest('.to-remove').remove();
    }

    function removeLine(element) {
        var parent = element.parent();
        parent.nextAll().remove()
        parent.remove();

        changeFlag(popLastHistoricChoice());

        count();
        $('.postit:last p:last').append(eRemoveLinePostit);
        choices(true);
    }

    $('#UserStories').on('click', '.postit.select', function () {
        hideMessage();

        userStorySelected = {
            'Id': $(this).children('#Id').val(),
            'Number': $(this).children('#Number').text(),
        }

        console.log(userStorySelected.Number)

        $('#UserStories .postit.select').removeClass('active');
        $(this).addClass('active');
    });

    function hideWriter() {
        $('.postit .input-group').hide();
    }

    function showWriter() {
        $('.postit .input-group').show();
        $('#Text').focus();
    }

    $('#Append').on('click', '.finish-card', function () {
        cleanChoice();
        finishCard();
    });

    $('#Append').on('click', '.continue', function () {
        var value = $(this).parent().next('#IdChoice').val();
        cleanChoice();

        var element = getElementByValue(value);

        changeFlagToNext(value);
        addTitle(element.Text);
        showWriter();
    });

    function cleanChoice() {
        $('.clickable').parent().remove();
        $('.choice').remove();
    }

    function changeFlagToNext(value) {
        var converted = parseInt(value) + 1;
        changeFlag(converted);
    }

    function changeFlag(value) {
        if (Number.isInteger(value)) {
            var element = getElementByValue(value);

            value = element != null ? value : none;
            sequence.forEach(i => i.Flag = i.Id == value ? true : false);
        }
    }

    function getElementByValue(value) {
        return sequence.find(i => i.Id == value);
    }

    function addHistoric(value) {
        historicChoice.push(value);
    }

    function popLastHistoricChoice() {
        var value = historicChoice.pop();

        if (value == historicChoice[historicChoice.length - 1])
            return value;

        if (value == none)
            return historicChoice[historicChoice.length - 1]

        return value - 1;
    }

    function choices(dontSaveHistoric) {
        var noChoiceIds = [0, 1]
        var finalIds = [3, 4, none]

        for (var i = 0; i < sequence.length; i++) {
            var item = sequence[i];

            if (item.Flag == true) {
                if (noChoiceIds.includes(item.Id)) {
                    showWriter();

                    changeFlagToNext(item.Id);
                    addTitle(item.Text);
                }
                else {
                    hideWriter();

                    var html = item.Html != additionalE.Html ? item.Html : '';
                    html += additionalE.Html;
                    html += finalIds.includes(item.Id) ? finalLine : '';

                    addChoice(html);
                }

                if (!dontSaveHistoric)
                    addHistoric(item.Id);

                break;
            }
        }
    }

    function resetUserStorySelected() {
        userStorySelected = null;
    }

    function appendDateOfUserStory(postit) {
        appendIdCardUserStory(postit);
        appendNumberCardUserStory(postit);
    }

    function appendIdCardUserStory(postit) {
        postit.prepend($('<input type="hidden" id="IdUserStory" value="' + userStorySelected.Id + '">'));
    }

    function appendNumberCardUserStory(postit) {
        postit.prepend($('<span id="Number" class="number">' + userStorySelected.Number + '</span>'));
    }

    function resetHistoricBDD() {
        historicChoice = [];
        changeFlag(0);
    }

</script>